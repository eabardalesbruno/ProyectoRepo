import * as path from 'path';
import * as dotenv from 'dotenv';
import { test } from '@playwright/test';
import axios from 'axios';
import * as fs from 'fs';

// Carga el archivo .env.qa
dotenv.config({ path: path.resolve(__dirname, '../../resources/.env.qa') });

test('OWASP ZAP Active Scan and Alerts', async ({ page }) => {
  const target = process.env.PLATAFORMA || 'https://default-url.com'; // URL de destino
  const zapSpiderUrl = 'http://localhost:9199/JSON/spider/action/scan/';
  const zapSpiderStatusUrl = 'http://localhost:9199/JSON/spider/view/status/';
  const zapApiUrl = 'http://localhost:9199/JSON/ascan/action/scan/';
  const zapStatusUrl = 'http://localhost:9199/JSON/ascan/view/status/';
  const zapAlertsUrl = 'http://localhost:9199/HTML/alert/view/alerts/';
  const zapVulnerabilitiesUrl = 'http://localhost:9199/HTML/ascan/view/scanProgress/';
  const zapReportUrl = 'http://localhost:9199/OTHER/core/other/htmlreport/';

  // Genera un nombre único para la subcarpeta de resultados
  const timestamp = new Date().toISOString().replace(/[:.]/g, '-'); // Formato: YYYY-MM-DDTHH-MM-SS
  const resultsDir = `./test-results/zap-scan-${timestamp}`; // Subcarpeta para los resultados
  const resultsPath = `${resultsDir}/zap-results.json`; // Archivo JSON para guardar los resultados

  console.log(`🔵 Iniciando escaneo activo sobre: ${target}`);

  try {
    // **1. Verifica si existen resultados previos**
    const combinedResultsPath = './test-results/zap-results.json';
    let combinedResults = []; // Estructura inicial para resultados combinados

    if (fs.existsSync(combinedResultsPath)) {
      console.log(`📂 Cargando resultados previos desde: ${combinedResultsPath}`);
      combinedResults = JSON.parse(fs.readFileSync(combinedResultsPath, 'utf-8'));
    }

    // **2. Realiza un rastreo previo (Spidering)**
    console.log('🕷️ Iniciando rastreo previo (Spidering)...');
    const spiderResponse = await axios.get(zapSpiderUrl, {
      params: { url: target },
    });

    if (!spiderResponse.data.scan) {
      console.error('❌ No se pudo iniciar el rastreo. Verifica la URL o el servicio OWASP ZAP.');
      throw new Error('Fallo al iniciar el rastreo.');
    }

    const spiderId = spiderResponse.data.scan;
    console.log(`🕷️ Spider ID recibido: ${spiderId}`);

    // Monitorea el progreso del rastreo
    let spiderProgress = 0;
    do {
      const spiderStatusResponse = await axios.get(zapSpiderStatusUrl, { params: { scanId: spiderId } });
      spiderProgress = parseInt(spiderStatusResponse.data.status, 10);
      console.log(`⏳ Progreso del rastreo: ${spiderProgress}%`);
      await new Promise((resolve) => setTimeout(resolve, 5000)); // Esperar 5 segundos
    } while (spiderProgress < 100);

    console.log('✅ Rastreo completado al 100%.');

    // **3. Inicia un escaneo activo en OWASP ZAP**
    console.log('🚀 Iniciando escaneo activo...');
    const response = await axios.get(zapApiUrl, {
      params: { url: target },
    });

    if (!response.data.scan) {
      console.error('❌ No se pudo iniciar el escaneo. Verifica la URL o el servicio OWASP ZAP.');
      throw new Error('Fallo al iniciar escaneo.');
    }

    const scanId = response.data.scan;
    console.log(`🆔 Scan ID recibido: ${scanId}`);

    // **4. Monitorea el progreso del escaneo**
    let progress = 0;
    console.log('📈 Monitoreando progreso del escaneo...');
    do {
      const statusResponse = await axios.get(zapStatusUrl, { params: { scanId } });
      progress = parseInt(statusResponse.data.status, 10);
      console.log(`⏳ Progreso: ${progress}%`);
      await new Promise((resolve) => setTimeout(resolve, 10000)); // Esperar 10 segundos
    } while (progress < 100);

    console.log('✅ Escaneo completado al 100%.');

    // **5. Obtén las alertas**
    console.log('📋 Obteniendo alertas...');
    const alertsResponse = await axios.get(zapAlertsUrl, { params: { baseurl: target } });
    console.log('📋 Alertas obtenidas.');

    // **6. Obtén las vulnerabilidades**
    console.log('📋 Obteniendo vulnerabilidades...');
    const vulnerabilitiesResponse = await axios.get(zapVulnerabilitiesUrl, { params: { scanId } });
    console.log('📋 Vulnerabilidades obtenidas.');

    // **7. Genera reporte HTML**
    console.log('📝 Generando reporte HTML...');
    const reportResponse = await axios.get(zapReportUrl, { responseType: 'arraybuffer' });
    fs.mkdirSync(resultsDir, { recursive: true });
    const reportPath = `${resultsDir}/zap-report.html`;
    fs.writeFileSync(reportPath, reportResponse.data);
    console.log(`📄 Reporte HTML guardado en: ${reportPath}`);

    // **8. Guarda los resultados en un archivo JSON**
    const results = {
      scanId,
      progress: '100%',
      alerts: alertsResponse.data,
      vulnerabilities: vulnerabilitiesResponse.data,
      timestamp,
    };

    // Combina los resultados actuales con los previos
    combinedResults.push(results);
    fs.writeFileSync(combinedResultsPath, JSON.stringify(combinedResults, null, 2));
    console.log(`📄 Resultados combinados guardados en: ${combinedResultsPath}`);

    // Guarda los resultados actuales en la subcarpeta
    fs.writeFileSync(resultsPath, JSON.stringify(results, null, 2));
    console.log(`📄 Resultados guardados en: ${resultsPath}`);
  } catch (error) {
    console.error('🔥 Error durante el escaneo:', error.message);
    console.error('📋 Detalles del error:', error.response?.data || error);
  }
});